/*
  SCC kosaraju algorithm
  write by gestapolur 
  2011-10-12
*/
#include<cstdlib>
#include<cstdio>
#include<cstring>
#define MAXN 1002
using namespace std;

int n , m ;
int mark[ MAXN ] , st[ MAXN ] , re[ MAXN ] , pre[ MAXN ];
int w[ MAXN ][ MAXN ] , rev[ MAXN ][ MAXN ];

void init()
{
  int u , v ;
  scanf( "%d%d" , &n , &m );
  for( int i = 1 ; i <= m ; ++ i )
    {
      scanf( "%d%d" , u , v );
      w[ u ][ ++ w[ u ][ 0 ] ] = v ;
      rev[ v ][ ++ rev[ v ][ 0 ] ] = u ;
    }
  return ;
}

void out()
{
  int i;
  for( i = 1 ; i <= n ; ++ i )
    printf( "%d " , mark[ i ] );
  printf("\n");
  return ;
}

void dfs1()//dfn mark
{
  int i , pos ;
  bool move ;
  
  for( i = 1 ; i <= n ; ++ i )
    { re[ i ] = 1 ; pre[ i ] = 0 ; }
  for( i = 1 ; i <= n ; ++ i )
    {
      pos = i ;
      do{
        for( i = re[ pos ] ; i <= w[ pos ][ 0 ] ; ++ i )
          if( not vis[ ])
            {
              break;
            }
        if( not move )
          {
        
          }
      }while( pos > 0 );
    }
  return ;
}

void dfs2()// reverse mark
{
  int i , pos ; 
  int tscc = 0 ;
  bool move ;
  memset( mark , 0 , sizeof( mark ) );
  for( i = 1 ; i <= n ; ++ i ) re[ i ] = 1 , pre[ i ] = 0 ;

  for( i = 1 ; i <= n ; ++ i )
    if( not mark[ st[ i ] ] )
      {
        pos = st[ i ] ;
        do{
          for( i = re[ pos ] ; i <= rev[ pos ][ 0 ] ; ++ i )
            if( not mark[ rev[ pos ][ i ] ] )
            {
              mark[ rev[ pos ][ i ] ] = tscc ;
              re[ pos ] = i + 1 ; 
              pos = rev[ pos ][ i ];
              move = true ;
              break;
            }
        }while( pos > 0 );
      }
  return ;
}

int main()
{
  init();
  dfs1();
  dfs2();
  output();
  return 0;
}
