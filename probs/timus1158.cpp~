/*
  TIMUS 1158
  2012-04-02
 */
#include<iostream>
#include<cstring>
#include<cstdlib>
#include<cstdio>
#include<queue>
#define MAXN 102
#define MAXM 52
using namespace std;

class node
{
public:
  int mv , pos;
};

class treenode
{
public:
  int c[ MAXN ];
  int fail;
};

int n , m , p , tot , ans;
bool end[ MAXN ] , apr[ 202 ];
int f[ MAXM ][ MAXN ] , fail[ MAXN ];
char aph[ MAXM ];
char w[ MAXN ][ MAXN ];
queue <node> q;

void count()
{
  int i , j;
  node p , t;

  do{
    p = q.front();
    q.pop();
    
    if( p.mv + 1 <= m )
      {
        t.mv = p.mv + 1;
        for( i = 0 ; i <= tot ; ++ i )
          if( w[ p.pos ][ i ] and not end[ i ] )
            {
              f[ p.mv + 1 ][ i ] += f[ p.mv ][ p.pos ];
              t.pos = i;
              q.push( t );
            }
      }
  }while( not q.empty() );

  ans = 0;
  for( i = 1 ; i <= tot ; ++ i )
    ans += f[ m ][ i ];
  cout<<ans<<"\n";

  return ;
}

void init()
{
  char str[ 12 ];
  int len , cur , pre;
  int i , j , k;
  bool move;

  cin>>n>>m>>p>>aph;

  for( i = 1 ; i <= p ; ++ i )
    {
      cin>>str;
      len = strlen( str );
      pre = 0;
      for( j = 0 ; j < len ; ++ j )
        {
          move = false;
          for( k = 0 ; k < tot ; ++ k )
            if( w[ pre ][ k ] == str[ j ] )
              {
                pre = k;
                move = true; 
                break;
              }
          if( not move )
            {
              apr[ str[ j ] - 32 ] = true;

              fail[ tot + 1 ] = 0;
              for( k = 1 ; k <= tot ; ++ k )
                if( w[ fail[ pre ] ][ k ] == str[ j ] )
                  {
                    fail[ tot + 1 ] = k;
                    break;
                  }
              w[ pre ][ ++ tot ] = str[ j ];
              w[ tot ][ fail[ tot + 1 ] ] = str[ j ];
              pre = tot;

              if( j == len - 1 )
                end[ tot ] = true;
            }
        }
    }

  return ;
}

int main()
{
  init();

  count();

  return 0;
}
