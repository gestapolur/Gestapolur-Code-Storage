
Problem Statement
    
There are N students standing in a single row, one next to the other, numbered 0 to N-1 from left to right. Your goal is to minimize the number of adjacent pairs where one student is a boy and the other is a girl. More precisely, you want to minimize the number of values i, 0 <= i < N-1, where student i and student i+1 are of different genders.  You are given the current arrangement as a string row, where the i-th character is 'G' if student i is a girl, and 'B' if student i is a boy. In a single move, you can choose two adjacent students and swap their positions. Return the minimum number of moves required to achieve your goal.
Definition
    
Class:
GirlsAndBoys
Method:
sortThem
Parameters:
string
Returns:
int
Method signature:
int sortThem(string row)
(be sure your method is public)
    

Constraints
-
row will contain between 1 and 50 characters, inclusive.
-
Each character in row will be 'G' or 'B'.
Examples
0)

    
"GGBBG"
Returns: 2
You can swap the rightmost girl with the two boys (one after the other) to get "GGGBB", with a minimum of only 1 pair of adjacent students of different gender.
1)

    
"BBBBGGGG"
Returns: 0
There is already a single pair of adjacent students of different gender, and there is no arrangement without such pairs at all, so the best solution is to swap nothing.
2)

    
"BGBGBGBGGGBBGBGBGG"
Returns: 33

3)

    
"B"
Returns: 0
With only one student, there is not much swapping to do.
This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.


Problem Statement
    
There is an infinite field divided into 1x1 squares. A robot is standing in one of the squares.  You are going to make the robot move according to the following algorithm. Create a String S by concatenating times copies of the given string program. Then, go through all the characters of S from beginning to end. For each character, move the robot to an adjacent square in the direction indicated by the character. 'U' means up, 'D' means down, 'L' means left and 'R' means right.  After you have gone through all the characters of S, determine which squares have been visited by the robot. A square is considered visited if the robot has been in it at least once. The starting and ending squares are considered visited. Return the total number of visited squares.
Definition
    
Class:
RobotSimulation
Method:
cellsVisited
Parameters:
string, int
Returns:
int
Method signature:
int cellsVisited(string program, int times)
(be sure your method is public)
    

Constraints
-
program will contain between 1 and 10 characters, inclusive.
-
Each character in program will be one of 'U', 'D', 'L' or 'R'.
-
times will be between 1 and 200,000,000, inclusive.
Examples
0)

    
"RRR"
100
Returns: 301
The robot will move to the right 300 times, so 301 squares will be visited.
1)

    
"DDU"
100
Returns: 102
The robot will move according to the pattern "DDU" 100 times. Initially, we have 1 visited square. The first time the pattern "DDU" is applied, it adds 2 new squares, and each subsequent time this pattern is applied, only 1 new square is added. Therefore the total number of visited squares is 1 + 2 + 1 * 99 = 102.
2)

    
"URLD"
100
Returns: 3
After each repetition of the pattern "URLD", the robot returns to the initial cell. So the answer here doesn't depend on times and is always equal to 3.
3)

    
"UUDUDDLLDR"
1
Returns: 7

4)

    
"UUDUDDLLDR"
12345678
Returns: 37037039

5)

    
"RRUUULLDD"
3603602
Returns: 10810815

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.


Problem Statement
    
In this problem, you will be given descriptions of several integer sequences, and you will be required to return elements at certain positions of the union of all the given sequences. The union of several sequences is a sequence containing all the elements of those sequences, sorted in non-decreasing order. For each integer x, the number of occurrences of x in the union is equal to the total number of occurrences of x in all the given sequences. For example, if we are given sequences (3, 2, 2, 3), (1) and (5, 7, 1), their union is the sequence (1, 1, 2, 2, 3, 3, 5, 7).  Each of the given sequences will be an arithmetic sequence, a geometric sequence or an explicit sequence.
An arithmetic sequence is described by three positive integers A, B and C. The sequence contains exactly C elements: A, A+B, A+B+B, ..., A+B*(C-1). Formally, the sequence is { A+B*x | x an integer between 0 and C-1, inclusive}.
A geometric sequence is described by three positive integers A, B and C. The sequence contains exactly C elements: A, A*B, A*B*B, ..., A*B^(C-1). Formally, the sequence is { A*B^x | x an integer between 0 and C-1, inclusive}.
An explicit sequence is just a non-empty sequence of arbitrary positive integers.
Each sequence will be represented as a string, where the first character is 'A', 'G' or 'E', denoting arithmetic, geometric or explicit sequences, respectively. The second character will always be a space. After that is a list of positive integers, where each integer is written with no leading zeroes, consecutive integers are separated by a single space, and there are no leading or trailing spaces. In the case of arithmetic and geometric sequences, this list will always contain exactly three integers, A, B and C, in that order, as described above for each type of sequence. For explicit sequences, the list will contain one or more integers, explicitly representing the members of the sequence.  You will be given a vector <string> seqs, where each element represents a sequence as described in the previous paragraph, and a vector <int> positions, which contains a list of 1-based positions. Return a vector <int> containing the same number of elements as positions, such that its i-th element is the element at position positions[i] of the union of all the sequences in seqs. If the union contains less than positions[i] elements or if the element at position positions[i] of the union is strictly greater than 1000000000 (10^9), the i-th element of the return must be -1 instead. See examples for further clarification.
Definition
    
Class:
SequenceMerger
Method:
getVal
Parameters:
vector <string>, vector <int>
Returns:
vector <int>
Method signature:
vector <int> getVal(vector <string> seqs, vector <int> positions)
(be sure your method is public)
    

Notes
-
The elements of the given sequences don't necessarily fit within 32-bit or 64-bit integer types.
Constraints
-
positions will contain between 1 and 50 elements, inclusive.
-
Each element of positions will be between 1 and 1000000000 (10^9), inclusive.
-
seqs will contain between 1 and 50 elements, inclusive.
-
Each element of seqs will contain between 3 and 50 characters, inclusive.
-
Each element of seqs will be formatted as described in the problem statement.
Examples
0)

    
{"E 1 1000000000 1000000001"}
{1,2,3,4}
Returns: {1, 1000000000, -1, -1 }
The sequence here has only 3 elements. The first two elements are returned normally. The element at position 3 is strictly greater than 1000000000, so you must return -1 in that place. There is no element at position 4, so you must also return -1 there.
1)

    
{"A 1 1 10", "G 1 2 4"}
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}
Returns: {1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, -1 }
The arithmetic sequence is 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. The geometric sequence is 1, 2, 4, 8. Therefore, the resulting sequence is 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10.
2)

    
{"A 1000000000 1000000000 1000000000","G 100000000000000000 1000000000000 100000000000000", "E 1000000000000000 10000000 10 1111"}
{1,2,3,4,5,6,7,8,9,10}
Returns: {10, 1111, 10000000, 1000000000, -1, -1, -1, -1, -1, -1 }
Watch out for big numbers.
3)

    
{"G 1 1 999999999", "E 2"}
{1,999999999,1000000000}
Returns: {1, 1, 2 }
A lot of 1s and a 2.
4)

    
{"A 100 341 1524", "G 1 3 45235", "E 653 87 12341 8785 123 543"}
{100000,1,10,10000,100,1000}
Returns: {-1, 1, 441, -1, 28403, 334621 }

This problem statement is the exclusive and proprietary property of TopCoder, Inc. Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited. (c)2003, TopCoder, Inc. All rights reserved.


